e=5
n1=23016083754690795756314744626221003507109700423713347358465479291327209635565497434971051980599321970193645404536431094654489842912742312456049249053372733418228070123862001670081209472458641503316714007764817212342352792793212073559480613434787490722789098850440969713799148668054513926429323117737553993494724577009330987787002304413557665089495639344226443816755929770445996941568203213232673894298128299646868053730823004215810250447456487610721268608713427004119966183493297000647653555422578700201642729986555351583360368963828931215360655711670623788745765865770770059999610601699437508618072327167959454877563
n2=27280083698623491841642987161077004275337301466544938686826970257022009494038717750732686980607298315037308419408572454386109636456133744327138053295448701574205365794607103635880014310617150619561976040039450282813550078062651220737369568625893651511814760750609033362970133795576840307122201289314515332641999108108816022942109810129983460615948243592704047328915070745965152356381980664696084965132148452961475276191561943755795890767703834754312410395575273457054979808023467914075437541208079228726383478949278890307848816015403143630220035863860434880650432875279557374017958539396656731175239554341823295441989
n3=25381493179207212442720529776676768036105478151953956885828874885765474048788555361965596521243922480226330230053463739233582541898008311123244214094405652835482606270773512394258993128666415321930075390511878089389135400674047050740215834815364247765730061694545516166010953965280513505801443372264184857506093747008989276680395755447342165101214271815809026244900418882467249047017428189107439490083078405728858162976813632156391544407673356219831313963019854459650348318227009142467030590345896992426935351027739742213223288979955453769637262345668084115489847647848531772754666095470402243473218075579967524504577
c1=16603420343139348461554041735489439792923043285031902486551314100988458266142389778775736809614096919057647467854453414144131710579141686479597054616411103029860494588237753950073055408347219428548604319651542619270061743952954143018246681383677674530490783804467424563518663109303481367099176249698652222433100429313155976599574778585333022963631613715096836845281944297128503677214364832836196611389083296582384253361285585131716235149507524741529046598655475625892085503720542810120745046459512853897107854991255759492722616929012681995214334514044898990219053229807581534273173007679715033371625090332095609985268
c2=522117010637942032453971490847540057495027062842208611046800425080635810223150796351572942601711670468109262885591352419138580729647558118672623124627489608439928659522549108953210747284697892116688097932149955079918329671863647102259208088168572864299943333845120405633807611374765250357827182062062630488944968618302647719889616533263678620186031878683155734106743046033620277893153786102812841374305191694214017215118333313712098017269231774957470964552864088096705627202015136815403295022611676392071934414592572427229188412343520797538756372134342401219773569793784375108440322847507485715201796393602429270838
c3=24287758171531037498645498449853905019522174682812517983376496569109416171058253234683577461706864118208166775849405608813753938594444582744748825753521474548967356218995736066677330232475906241827373118427711608244409758835436828865481271594068313075978808556182516990720441429455051509972674929783761019685948215768326812052437593696507102548202222217425968704613013920035535193635415655155005705965207856273352611443223057818911191765304740793733076044176438671683491222041915364050824099121981466764663061883368744370071031949753254142510597049180405472270193754371933468547908392545569873790017488184925150615599
def chinese_remainder(n, a):
    sum = 0
    prod = reduce(lambda a, b: a*b, n)
    for n_i, a_i in zip(n, a):
        p = prod / n_i
        sum += a_i * mul_inv(p, n_i) * p
    return sum % prod

def mul_inv(a, b):
    b0 = b
    x0, x1 = 0, 1
    if b == 1: return 1
    while a > 1:
        q = a / b
        a, b = b, a%b
        x0, x1 = x1 - q * x0, x0
    if x1 < 0: x1 += b0
    return x1

def find_invpow(x,n):
    high = 1
    while high ** n < x:
        high *= 2
    low = high/2
    while low < high:
        mid = (low + high) // 2
        if low < mid and mid**n < x:
            low = mid
        elif high > mid and mid**n > x:
            high = mid
        else:
            return mid
    return mid + 1

flag_cubed=chinese_remainder([n1,n2,n3],[c1,c2,c3])


flag=find_invpow(flag_cubed,e)
print "flag: ",hex(flag)[2:-1].decode("hex")
