from sage.all import *
import binascii
n1 = 19180711545893176513037550390323379574821852830665661812056678865741809891967598330424432450065638550340708416772232861627803383996685973692319978144111094705678356718069839745329804369923049623077146724976343425793942969144731442443607177966505595110345695314223998207352543996470777991272166737723490287258351016452097039979125039319504321174407700539531877444075872453220474913463319033875264101011295681676774076367210997858399851393634010112304767318681335454946488666538950765836709367621997962434256967765320251658524109362889423421160554230180542246491892887129152380892721807921025298941063392821275387956851
e = 3
C1 = 10617566999628912185295245531953213527559814694727728142545043433480019411237480145986985882449558864168211385681896482378449823747441803438670400510137198220262195315209481635890013066600546260308321298136947841551726332702265263837562250202354462677522494316026381988189773765327225351249236530371863978497695451170441288081525664831447226032593381216382351215407068401452628404643156949120709794037992179766554488005548557031077900524301851820296037536096594585284155118619190837764227991743761276671455986679368645136860690325484523944557771355987570478885269506827051401828416063093944985835161921327464447871106
C2 = 2069974708519259297653348254184759465679592786498582181328669514036963549937305144526291123375712750278644768553299249898324900830209770180137035809280980975913824124699190415073169316084726905024106751369093433758725020789443184770677273787788939387449367340946905243057636103620651429619588399367759434188489509721732670373888278635774315009446062282885892652416644565190355493504248873848564166760911154558539830618230510017160262636629614445738277855949208896757531853792201404621119618421666537271194049602944291417955245079792208438850326668220480422287138138591116232110069152575865135196283887876267599201597
 
PRxy.<x,y> = PolynomialRing(Zmod(n1))
PRx.<xn> = PolynomialRing(Zmod(n1))
PRZZ.<xz,yz> = PolynomialRing(Zmod(n1))
 
g1 = x**e - C1
g2 = (x + y)**e - C2
 
q1 = g1.change_ring(PRZZ)
q2 = g2.change_ring(PRZZ)
 
h = q2.resultant(q1)
# need to switch to univariate polynomial ring
# because .small_roots is implemented only for univariate
h = h.univariate_polynomial() # x is hopefully eliminated
h = h.change_ring(PRx).subs(y=xn)
h = h.monic()
 
roots = h.small_roots(X=2**40, beta=0.3)
assert roots, "Failed1"
 
diff = roots[0]
if diff > 2**32:
    diff = -diff
    C1, C2 = C2, C1
print("Difference:", diff)



x = PRx.gen() # otherwise write xn
g1 = x**e - C1
g2 = (x + diff)**e - C2
 
# gcd
while g2:
    g1, g2 = g2, g1 % g2
 
g = g1.monic()
assert g.degree() == 1, "Failed 2"
 
# g = xn - msg
msg = -g[0]
# convert to str
h = hex(int(msg))[2:].rstrip("L")
h = "0" * (len(h) % 2) + h
print(binascii.unhexlify(h))
